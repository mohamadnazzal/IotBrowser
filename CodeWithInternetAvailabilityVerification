using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices.WindowsRuntime;
using Windows.Foundation;
using Windows.Foundation.Collections;
using Windows.UI.Xaml;
using Windows.UI.Xaml.Controls;
using Windows.UI.Xaml.Controls.Primitives;
using Windows.UI.Xaml.Data;
using Windows.UI.Xaml.Input;
using Windows.UI.Xaml.Media;
using Windows.UI.Xaml.Navigation;
using System.Threading.Tasks;
using Windows.UI.Popups;
using System.Net;
using System.Net.Sockets;
using Windows.Networking.Connectivity;
using System.Text;
using System.Diagnostics;


namespace IoT_Project
{
    public sealed partial class MainPage : Page
    {
        public MainPage()
        {
            this.InitializeComponent();
            if (NetworkAvailabilty.Instance.IsNetworkAvailable)
            {
                ViewWebPage();
            }
            else
            {
                messageDialogWarning();
            }
        }
        public class NetworkAvailabilty
        {
            private static NetworkAvailabilty _networkAvailabilty;
            public static NetworkAvailabilty Instance
            {
                get { return _networkAvailabilty ?? (_networkAvailabilty = new NetworkAvailabilty()); }
                set { _networkAvailabilty = value; }
            }
            private bool _isNetworkAvailable;
            public event Action<bool> OnNetworkAvailabilityChange = delegate { };
            public bool IsNetworkAvailable
            {
                get
                {
                    return _isNetworkAvailable;
                }
                protected set
                {
                    if (_isNetworkAvailable == value) return;
                    _isNetworkAvailable = value;
                    OnNetworkAvailabilityChange(value);
                }
            }
            private void CheckInternetAccess()
            {
                var connectionProfile = NetworkInformation.GetInternetConnectionProfile();
                IsNetworkAvailable = (connectionProfile != null &&
                                     connectionProfile.GetNetworkConnectivityLevel() ==
                                     NetworkConnectivityLevel.InternetAccess);
                Debug.WriteLine("has network changed: " + IsNetworkAvailable);
            }
            private void NetworkInformationOnNetworkStatusChanged(object sender)
            {
                CheckInternetAccess();
                Debug.WriteLine("network status changed");
            }
            private NetworkAvailabilty()
            {
                NetworkInformation.NetworkStatusChanged += NetworkInformationOnNetworkStatusChanged;
                CheckInternetAccess();
            }
        }
        public void ViewWebPage()
        {
            webView.Visibility = Visibility.Visible;
            webView.Navigate(new Uri("http://mohamadnazzal.me/project"));
        }
        public async void messageDialogWarning()
        {
            var messageDialog = new MessageDialog("No Internet Conncetion.");
            await messageDialog.ShowAsync();
        }
    }
}

///// Source : http://windowsapptutorials.com/windows-10/how-to-check-for-network-availability-in-universal-windows-apps/ 


///// App Design : 
<Page
    x:Class="IoT_Project.MainPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:IoT_Project"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d">

    <Grid Background="{ThemeResource ApplicationPageBackgroundThemeBrush}">
        <Grid.RowDefinitions>

            <RowDefinition Height="*"></RowDefinition>

        </Grid.RowDefinitions>
        <WebView x:Name="webView" Grid.Row="1" />
    </Grid>
</Page>


///Thanks Folks . Mohamad Nazzal 
************************************************************************
